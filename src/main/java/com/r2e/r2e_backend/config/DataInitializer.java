package com.r2e.r2e_backend.config;

import com.r2e.r2e_backend.entity.ERole;
import com.r2e.r2e_backend.entity.Role;
import com.r2e.r2e_backend.entity.User;
import com.r2e.r2e_backend.repository.RoleRepository;
import com.r2e.r2e_backend.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
public class DataInitializer implements CommandLineRunner {

    private final RoleRepository roleRepository;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    @Override
    public void run(String... args) throws Exception {
        System.out.println("üöÄ D√©but de l'initialisation des donn√©es...");

        try {
            // Initialiser les r√¥les
            initializeRoles();

            // Initialiser un utilisateur admin
            initializeAdminUser();

            // Initialiser un utilisateur user
            initializeTestUser();

            System.out.println("‚úÖ Initialisation des donn√©es termin√©e !");
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de l'initialisation: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void initializeRoles() {
        // V√©rifier et cr√©er le r√¥le USER
        if (roleRepository.findByName(ERole.ROLE_USER).isEmpty()) {
            Role userRole = new Role();
            userRole.setName(ERole.ROLE_USER);
            roleRepository.save(userRole);
            System.out.println("‚úÖ R√¥le ROLE_USER cr√©√©");
        } else {
            System.out.println("‚ÑπÔ∏è R√¥le ROLE_USER existe d√©j√†");
        }

        // V√©rifier et cr√©er le r√¥le ADMIN
        if (roleRepository.findByName(ERole.ROLE_ADMIN).isEmpty()) {
            Role adminRole = new Role();
            adminRole.setName(ERole.ROLE_ADMIN);
            roleRepository.save(adminRole);
            System.out.println("‚úÖ R√¥le ROLE_ADMIN cr√©√©");
        } else {
            System.out.println("‚ÑπÔ∏è R√¥le ROLE_ADMIN existe d√©j√†");
        }

        // V√©rifier et cr√©er le r√¥le STUDENT
        if (roleRepository.findByName(ERole.ROLE_STUDENT).isEmpty()) {
            Role studentRole = new Role();
            studentRole.setName(ERole.ROLE_STUDENT);
            roleRepository.save(studentRole);
            System.out.println("‚úÖ R√¥le ROLE_STUDENT cr√©√©");
        } else {
            System.out.println("‚ÑπÔ∏è R√¥le ROLE_STUDENT existe d√©j√†");
        }

        // V√©rifier et cr√©er le r√¥le PROFESSOR
        if (roleRepository.findByName(ERole.ROLE_PROFESSOR).isEmpty()) {
            Role professorRole = new Role();
            professorRole.setName(ERole.ROLE_PROFESSOR);
            roleRepository.save(professorRole);
            System.out.println("‚úÖ R√¥le ROLE_PROFESSOR cr√©√©");
        } else {
            System.out.println("‚ÑπÔ∏è R√¥le ROLE_PROFESSOR existe d√©j√†");
        }
    }

    private void initializeAdminUser() {
        // V√©rifier si l'admin existe d√©j√†
        if (userRepository.findByEmail("admin@r2e.com").isEmpty()) {
            // R√©cup√©rer le r√¥le ADMIN
            Role adminRole = roleRepository.findByName(ERole.ROLE_ADMIN)
                    .orElseThrow(() -> new RuntimeException("R√¥le ADMIN non trouv√©"));

            // Cr√©er l'utilisateur admin
            User adminUser = new User();
            adminUser.setFirstName("Admin");
            adminUser.setLastName("System");
            adminUser.setEmail("admin@r2e.com");
            adminUser.setPassword(passwordEncoder.encode("admin123"));
            adminUser.setRole(adminRole);
            adminUser.setNewsletter(false);
            adminUser.setTerms(true);

            userRepository.save(adminUser);
            System.out.println("‚úÖ Utilisateur admin cr√©√© - Email: admin@r2e.com / Mot de passe: admin123");
        } else {
            System.out.println("‚ÑπÔ∏è Utilisateur admin existe d√©j√†");
        }
    }

    private void initializeTestUser() {
        // V√©rifier si l'utilisateur test existe d√©j√†
        if (userRepository.findByEmail("user@r2e.com").isEmpty()) {
            // R√©cup√©rer le r√¥le USER
            Role userRole = roleRepository.findByName(ERole.ROLE_USER)
                    .orElseThrow(() -> new RuntimeException("R√¥le USER non trouv√©"));

            // Cr√©er l'utilisateur test
            User testUser = new User();
            testUser.setFirstName("John");
            testUser.setLastName("Doe");
            testUser.setEmail("user@r2e.com");
            testUser.setPassword(passwordEncoder.encode("user123"));
            testUser.setRole(userRole);
            testUser.setStudentType("Bachelor");
            testUser.setNewsletter(true);
            testUser.setTerms(true);

            userRepository.save(testUser);
            System.out.println("‚úÖ Utilisateur test cr√©√© - Email: user@r2e.com / Mot de passe: user123");
        } else {
            System.out.println("‚ÑπÔ∏è Utilisateur test existe d√©j√†");
        }
    }
}